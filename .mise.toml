[tools]
jq = "latest"
# note: rust-toolchain.toml is an 'idiomatic version file' for rust and mise does
#       pick it up automatically, but it is currently behind a experimental flag
rust = "{{ exec(command='./scripts/rust-version.sh') }}"
cargo-binstall = "latest"
"cargo:bacon" = "latest"

[env]
_.file = ['.env', '.env.local']

# Privy credentials for running examples
# You can set these values here, or in a .env.local file that mise will load.
# PRIVY_APP_ID = ""
# PRIVY_APP_SECRET = ""
# PRIVY_WALLET_ID = ""
# PRIVY_PUBLIC_KEY = ""

[tasks.pull-openapi]
description = "Pull the latest OpenAPI spec from the Privy API repo and apply our overlay"
run = [
  # we need to do some post-processing on this spec to make it work more nicely with
  # progenitor / our downstream code generation
  #
  # - openapi.overlay.json:
  #   - sets operation ids for all operations we need to generate code for (requirement from progenitor)
  #   - this will be fixed upstream and removed
  # - scripts/openapi.jq:
  #   - merges the official published spec with our openapi.overlay.json file
  #   - removes all instances of privy-app-id from the input args for each operation
  #   - this can be fixed upstream by moving privy-app-id into the security scheme
  # - sed:
  #   - replace all instances of anyOf with oneOf
  #   - we are being unintentionally loose with our definitions
  #   - this will be fixed upstream and removed
  "curl https://api.privy.io/v1/openapi.json | jq -s -f 'scripts/openapi.jq' openapi.overlay.json - | sed \"s/anyOf/oneOf/g\" > openapi.json",
]

[tasks.gen-p256-key]
description = "Generate P-256 key pair for Privy wallet owner"
run = [
  "openssl ecparam -genkey -name prime256v1 -noout -out private_key.pem",
  "openssl ec -in private_key.pem -pubout -out public_key.pem",
  "echo 'Generated P-256 key pair:'",
  "echo 'Private key: private_key.pem'",
  "echo 'Public key: public_key.pem'",
  "echo",
  "echo 'Public key contents:'",
  "cat public_key.pem"
]
